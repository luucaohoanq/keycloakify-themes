// This file is auto-generated by the `update-kc-gen` command. Do not edit it manually.
// Hash: 8489c44f00527756067da73e8b6def147868fb7bb0dd224934ba1acbc247d4ee


/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

import { lazy, Suspense, type ReactNode } from "react";

export type ThemeName = "fdn-themes";

export const themeNames: ThemeName[] = ["fdn-themes"];

export type KcEnvName = "FDN_THEME_PRIMARY_COLOR" | "FDN_THEME_SECONDARY_COLOR";

export const kcEnvNames: KcEnvName[] = ["FDN_THEME_PRIMARY_COLOR", "FDN_THEME_SECONDARY_COLOR"];

export const kcEnvDefaults: Record<KcEnvName, string> = {
  "FDN_THEME_PRIMARY_COLOR": "#1976d2",
  "FDN_THEME_SECONDARY_COLOR": "#9c27b0"
};

/**
 * NOTE: Do not import this type except maybe in your entrypoint. 
 * If you need to import the KcContext import it either from src/login/KcContext.ts or src/account/KcContext.ts.
 * Depending on the theme type you are working on.
 */
export type KcContext =
    | import("./login/KcContext").KcContext
    | import("./account/KcContext").KcContext
    ;

declare global {
    interface Window {
        kcContext?: KcContext;
    }
}

export const KcLoginPage = lazy(() => import("./login/KcPage"));
export const KcAccountPage = lazy(() => import("./account/KcPage"));

export function KcPage(
    props: {
        kcContext: KcContext;
        fallback?: ReactNode;
    }
) {
    const { kcContext, fallback } = props;
    return (
        <Suspense fallback={fallback}>
            {(() => {
                switch (kcContext.themeType) {
                    case "login": return <KcLoginPage kcContext={kcContext} />;
                    case "account": return <KcAccountPage kcContext={kcContext} />;
                }
            })()}
        </Suspense>
    );
}
